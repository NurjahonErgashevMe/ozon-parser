#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

from src.utils.logger import setup_logging
from src.config.settings import Settings
from src.parsers.link_parser import OzonLinkParser
from src.parsers.product_parser import OzonProductParser
import logging

def test_link_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å—Å—ã–ª–æ–∫"""
    print("=== –¢–ï–°–¢ –ü–ê–†–°–ï–†–ê –°–°–´–õ–û–ö ===")
    
    category_url = "https://ozon.ru/category/sistemnye-bloki-15704/"
    max_products = 10  # –î–ª—è —Ç–µ—Å—Ç–∞ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 10 —Ç–æ–≤–∞—Ä–æ–≤
    
    parser = OzonLinkParser(category_url, max_products)
    success, links = parser.start_parsing()
    
    if success and links:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫")
        for i, (url, img_url) in enumerate(list(links.items())[:3], 1):
            print(f"{i}. {url}")
            print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_url}")
        return links
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫")
        return {}

def test_product_parser(links):
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\n=== –¢–ï–°–¢ –ü–ê–†–°–ï–†–ê –¢–û–í–ê–†–û–í ===")
    
    if not links:
        print("‚ùå –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_links = dict(list(links.items())[:3])
    
    parser = OzonProductParser(max_workers=2)
    results = parser.parse_products(test_links)
    
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤:")
    
    for result in results:
        print(f"\nüì¶ –ê—Ä—Ç–∏–∫—É–ª: {result.article}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result.name}")
        print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {result.company_name}")
        print(f"   –¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π: {result.card_price}")
        print(f"   –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞: {result.price}")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {result.original_price}")
        print(f"   –£—Å–ø–µ—Ö: {'‚úÖ' if result.success else '‚ùå'}")
        if result.error:
            print(f"   –û—à–∏–±–∫–∞: {result.error}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    setup_logging(log_level="INFO")
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞")
        
        # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
        links = test_link_parser()
        
        # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤
        if links:
            test_product_parser(links)
        
        print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()