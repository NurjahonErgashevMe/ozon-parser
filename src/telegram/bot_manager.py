
import logging
import threading
import time
from typing import Optional, TYPE_CHECKING
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

if TYPE_CHECKING:
    from ..core.app_manager import AppManager

logger = logging.getLogger(__name__)

class TelegramBotManager:
    
    def __init__(self, bot_token: str, user_id: str, app_manager: 'AppManager'):
        self.bot_token = bot_token
        self.user_id = user_id
        self.app_manager = app_manager
        self.application: Optional[Application] = None
        self.is_running = False
        self.bot_thread: Optional[threading.Thread] = None
        
        logger.info("Telegram –±–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start(self) -> bool:
        try:

            self.application = Application.builder().token(self.bot_token).build()
            

            self._register_handlers()
            

            self.bot_thread = threading.Thread(target=self._run_bot, daemon=True)
            self.bot_thread.start()
            

            time.sleep(2)
            
            if self.is_running:

                self.send_message("ü§ñ Ozon Parser –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                return True
            else:
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            return False
    
    def _run_bot(self):
        try:
            self.is_running = True
            logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            

            self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞: {e}")
        finally:
            self.is_running = False
    
    def _register_handlers(self):

        self.application.add_handler(CommandHandler("start", self._cmd_start))
        self.application.add_handler(CommandHandler("status", self._cmd_status))
        self.application.add_handler(CommandHandler("stop", self._cmd_stop))
        self.application.add_handler(CommandHandler("help", self._cmd_help))
        

        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
    
    async def _cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized_user(update):
            return
        
        welcome_text = (
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ozon Parser!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞\n"
            "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥\n"
            "/help - –ø–æ–º–æ—â—å\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
        )
        
        await update.message.reply_text(welcome_text)
    
    async def _cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized_user(update):
            return
        
        status = self.app_manager.get_status()
        
        status_text = f"üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞:\n\n"
        status_text += f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if status['is_running'] else '–ù–µ—Ç'}\n"
        status_text += f"ü§ñ Telegram –±–æ—Ç: {'–ê–∫—Ç–∏–≤–µ–Ω' if status['telegram_bot_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        status_text += f"üì¶ –ú–∞–∫—Å. —Ç–æ–≤–∞—Ä–æ–≤: {status['settings']['max_products']}\n"
        status_text += f"üë• –ú–∞–∫—Å. –≤–æ—Ä–∫–µ—Ä–æ–≤: {status['settings']['max_workers']}\n"
        
        if status['last_results']:
            results = status['last_results']
            status_text += f"\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            status_text += f"–£—Å–ø–µ—à–Ω–æ: {results.get('successful_products', 0)}/{results.get('total_products', 0)}"
        
        await update.message.reply_text(status_text)
    
    async def _cmd_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized_user(update):
            return
        
        if self.app_manager.is_running:
            self.app_manager.stop_parsing()
            await update.message.reply_text("‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    
    async def _cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized_user(update):
            return
        
        help_text = (
            "üÜò –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞\n"
            "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:\n"
            "https://ozon.ru/category/sistemnye-bloki-15704/\n\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ —Ö–æ–¥–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"
        )
        
        await update.message.reply_text(help_text)
    
    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized_user(update):
            return
        
        message_text = update.message.text.strip()
        

        if self._is_ozon_category_url(message_text):
            if self.app_manager.is_running:
                await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /stop")
                return
            
            await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
            success = self.app_manager.start_parsing(message_text)
            
            if not success:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
            )
    
    def _is_authorized_user(self, update: Update) -> bool:
        user_id = str(update.effective_user.id)
        if user_id != self.user_id:
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        return True
    
    def _is_ozon_category_url(self, url: str) -> bool:
        return (
            url.startswith(('http://', 'https://')) and
            'ozon.ru' in url and
            '/category/' in url
        )
    
    def send_message(self, text: str) -> bool:
        try:
            if not self.is_running or not self.application:
                return False
            

            bot = Bot(token=self.bot_token)
            

            def send_async():
                try:
                    import asyncio
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(bot.send_message(chat_id=self.user_id, text=text))
                    loop.close()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            thread = threading.Thread(target=send_async, daemon=True)
            thread.start()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    def stop(self):
        try:
            self.is_running = False
            
            if self.application:
    
                if hasattr(self.application, 'stop'):
                    self.application.stop()
                
                if hasattr(self.application, 'shutdown'):
                    self.application.shutdown()
            

            if self.bot_thread and self.bot_thread.is_alive():
                self.bot_thread.join(timeout=5)
            
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")