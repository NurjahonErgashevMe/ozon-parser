import asyncio
import logging
import threading
from typing import Optional, TYPE_CHECKING, Dict
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ..utils.database import Database

if TYPE_CHECKING:
    from ..core.app_manager import AppManager

logger = logging.getLogger(__name__)

class ParsingStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_count = State()
    settings_menu = State()
    waiting_for_default_count = State()

FIELD_NAMES = {
    'article': '–ê—Ä—Ç–∏–∫—É–ª',
    'name': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    'seller_name': '–ü—Ä–æ–¥–∞–≤–µ—Ü',
    'company_name': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
    'inn': '–ò–ù–ù',
    'card_price': '–¶–µ–Ω–∞ –∫–∞—Ä—Ç—ã',
    'price': '–¶–µ–Ω–∞',
    'original_price': '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞',
    'product_url': '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä',
    'image_url': '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    'orders_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
    'reviews_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤',
    'average_rating': '–†–µ–π—Ç–∏–Ω–≥',
    'working_time': '–†–∞–±–æ—Ç–∞–µ—Ç —Å'
}

class TelegramBotManager:
    
    def __init__(self, bot_token: str, user_ids: list, app_manager: 'AppManager'):
        self.bot_token = bot_token
        self.user_ids = user_ids  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User ID
        self.app_manager = app_manager
        self.bot = Bot(token=bot_token)
        self.dp = Dispatcher()
        self.is_running = False
        self.bot_thread: Optional[threading.Thread] = None
        self.db = Database()
        self.user_data: Dict[str, dict] = {}
        self.parsing_user_id = None
        
        self._register_handlers()

    
    def start(self) -> bool:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.bot_thread = threading.Thread(target=self._run_bot, daemon=True)
            self.bot_thread.start()
            
            # –î–∞–µ–º –±–æ—Ç—É –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            import time
            time.sleep(2)
            
            if self.is_running:
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                notification_thread = threading.Thread(
                    target=self._send_startup_notification,
                    daemon=True
                )
                notification_thread.start()
                return True
            else:
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            return False

    def _send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –≠—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º asyncio
            temp_bot = Bot(token=self.bot_token)
            
            async def send_and_close():
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    for user_id in self.user_ids:
                        await temp_bot.send_message(chat_id=user_id, 
                                                text="ü§ñ Ozon Parser –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                finally:
                    await temp_bot.session.close()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
            asyncio.run(send_and_close())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    def _run_bot(self):
        try:
            self.is_running = True

            
            asyncio.run(self.dp.start_polling(self.bot))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞: {e}")
            self.is_running = False
    
    def _register_handlers(self):
        self.dp.message.register(self._cmd_start, Command('start'))
        self.dp.message.register(self._cmd_status, Command('status'))
        self.dp.message.register(self._cmd_settings, Command('settings'))
        self.dp.message.register(self._cmd_help, Command('help'))
        
        self.dp.callback_query.register(self._handle_callback)
        self.dp.message.register(self._handle_url_input, StateFilter(ParsingStates.waiting_for_url))
        self.dp.message.register(self._handle_count_input, StateFilter(ParsingStates.waiting_for_count))
        self.dp.message.register(self._handle_default_count_input, StateFilter(ParsingStates.waiting_for_default_count))
        self.dp.message.register(self._handle_message)
    
    async def _cmd_start(self, message: Message, state: FSMContext = None):
        if not self._is_authorized_user(message):
            return
        
        if state:
            await state.clear()
        
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"), KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ], resize_keyboard=True)
        
        welcome_text = (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ozon Parser!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await message.reply(welcome_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def _cmd_status(self, message: Message):
        await self._show_status(message)
    
    async def _show_status(self, message_or_query):
        if not self._is_authorized_user(message_or_query):
            return
        
        status = self.app_manager.get_status()
        
        status_text = f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞</b>\n\n"
        status_text += f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if status['is_running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        status_text += f"ü§ñ Telegram –±–æ—Ç: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"
        status_text += f"üì¶ –ú–∞–∫—Å. —Ç–æ–≤–∞—Ä–æ–≤: {status['settings']['max_products']}\n"
        status_text += f"üë• –ú–∞–∫—Å. –≤–æ—Ä–∫–µ—Ä–æ–≤: {status['settings']['max_workers']}\n"
        
        if status['last_results']:
            results = status['last_results']
            status_text += f"\nüìà <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            status_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results.get('successful_products', 0)}/{results.get('total_products', 0)}"
        
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ], resize_keyboard=True)
        
        await message_or_query.reply(status_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def _cmd_settings(self, message: Message, state: FSMContext):
        await self._show_settings(message, state)
    
    async def _show_settings(self, message_or_query, state: FSMContext):
        if not self._is_authorized_user(message_or_query):
            return
        
        user_id = str(message_or_query.from_user.id)
        settings = self.db.get_user_settings(user_id)
        default_count = settings.get('default_product_count', 500)
        
        text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_count}\n\n"
        
        keyboard = [
            [InlineKeyboardButton(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="change_default_count")],
            [InlineKeyboardButton(text="üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", callback_data="configure_fields")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await state.set_state(ParsingStates.settings_menu)
        
        if isinstance(message_or_query, CallbackQuery):
            await message_or_query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            await message_or_query.reply(text, reply_markup=reply_markup, parse_mode="HTML")
    
    async def _cmd_help(self, message: Message):
        await self._show_help(message)
    
    async def _show_help(self, message_or_query):
        if not self._is_authorized_user(message_or_query):
            return
        
        help_text = (
            "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>\n\n"
            "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥:</b>\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥'\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon\n"
            "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:</b>\n"
            "<code>https://ozon.ru/category/sistemnye-bloki-15704/</code>\n\n"
            "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–∏–µ –ø–æ–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel —Ñ–∞–π–ª.\n\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ —Ö–æ–¥–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ üìä"
        )
        
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ], resize_keyboard=True)
        
        await message.reply(help_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def _handle_callback(self, query: CallbackQuery, state: FSMContext):
        if not self._is_authorized_user(query):
            return
        
        data = query.data
        
        if data == "main_menu":
            await state.clear()
            await self._cmd_start(query.message, state)
        elif data == "start_parsing":
            await self._start_parsing_flow(query, state)
        elif data == "status":
            await self._show_status(query)
        elif data == "settings":
            await self._show_settings(query, state)
        elif data == "help":
            await self._show_help(query)
        elif data == "cancel_parsing":
            await state.clear()
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True)
            await query.message.edit_text("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω")
            await query.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        elif data == "stop_parsing":
            self.app_manager.stop_parsing()
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True)
            await query.message.edit_text("‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await query.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        elif data == "skip_count":
            user_id = str(query.from_user.id)
            if user_id in self.user_data and 'url' in self.user_data[user_id]:
                settings = self.db.get_user_settings(user_id)
                default_count = settings.get('default_product_count', 500)
                await self._start_parsing_with_count(query, self.user_data[user_id]['url'], default_count)
        elif data.startswith("toggle_field_"):
            await self._toggle_field(query, data.replace("toggle_field_", ""), state)
        elif data == "save_settings":
            await self._save_settings(query, state)
        elif data == "change_default_count":
            await self._change_default_count(query, state)
        elif data == "configure_fields":
            await self._configure_fields(query, state)
        elif data == "settings":
            await self._show_settings(query, state)
        
        await query.answer()
    
    async def _start_parsing_flow(self, query: CallbackQuery, state: FSMContext):
        if self.app_manager.is_running:
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True)
            await query.message.edit_text("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")
            await query.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        else:
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ], resize_keyboard=True)
            await query.message.edit_text("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon:")
            await query.message.reply("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)
            await state.set_state(ParsingStates.waiting_for_url)
    
    async def _handle_url_input(self, message: Message, state: FSMContext):
        if not self._is_authorized_user(message):
            return
        
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await self._cmd_start(message)
            return
        
        if not message.text or not self._is_ozon_category_url(message.text):
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ], resize_keyboard=True)
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon:", reply_markup=keyboard)
            return
        
        user_id = str(message.from_user.id)
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        self.user_data[user_id]['url'] = message.text.strip()
        
        settings = self.db.get_user_settings(user_id)
        default_count = settings.get('default_product_count', 500)
        
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text=f"‚è≠Ô∏è –°–∫–∏–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_count})")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True)
        
        await message.reply("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ü–∏—Ñ—Ä–∞–º–∏):", reply_markup=keyboard)
        await state.set_state(ParsingStates.waiting_for_count)
    
    async def _handle_count_input(self, message: Message, state: FSMContext):
        if not self._is_authorized_user(message):
            return
        
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await self._cmd_start(message)
            return
        
        user_id = str(message.from_user.id)
        settings = self.db.get_user_settings(user_id)
        default_count = settings.get('default_product_count', 500)
        
        if message.text == f"‚è≠Ô∏è –°–∫–∏–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_count})":
            url = self.user_data.get(user_id, {}).get('url')
            if url:
                await self._start_parsing_with_count(message, url, default_count)
            return
        
        try:
            count = int(message.text.strip())
            if count < 1 or count > 10000:
                raise ValueError()
        except ValueError:
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text=f"‚è≠Ô∏è –°–∫–∏–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_count})")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ], resize_keyboard=True)
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000:", reply_markup=keyboard)
            return
        
        user_id = str(message.from_user.id)
        url = self.user_data.get(user_id, {}).get('url')
        if url:
            await self._start_parsing_with_count(message, url, count)
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
    
    async def _start_parsing_with_count(self, message_or_query, url: str, count: int):
        self.app_manager.settings.MAX_PRODUCTS = count
        
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å")]
        ], resize_keyboard=True)
        
        text = f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {count} —Ç–æ–≤–∞—Ä–æ–≤...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        
        await message_or_query.reply(text, reply_markup=keyboard)
        
        self.parsing_user_id = str(message_or_query.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = self.db.get_user_settings(self.parsing_user_id)
        selected_fields = user_settings.get('selected_fields', [])
        
        def start_parsing():
            success = self.app_manager.start_parsing(url, selected_fields)
            if not success:
                asyncio.run(self.send_message("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"))
        
        threading.Thread(target=start_parsing, daemon=True).start()
    
    async def _toggle_field(self, query: CallbackQuery, field_key: str, state: FSMContext):
        user_id = str(query.from_user.id)
        settings = self.db.get_user_settings(user_id)
        selected_fields = settings['selected_fields']
        field_order = settings['field_order']
        default_count = settings.get('default_product_count', 500)
        
        if field_key in selected_fields:
            if len(selected_fields) > 2:
                selected_fields.remove(field_key)
                if field_key in field_order:
                    field_order.remove(field_key)
        else:
            selected_fields.append(field_key)
            field_order.append(field_key)
        
        self.db.save_user_settings(user_id, selected_fields, field_order, default_count)
        await self._configure_fields(query, state)
    
    async def _save_settings(self, query: CallbackQuery, state: FSMContext):
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ], resize_keyboard=True)
        await query.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await query.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        await state.clear()
    
    async def _handle_message(self, message: Message):
        if not self._is_authorized_user(message):
            return
        
        text = message.text
        
        if text == "üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥":
            await self._start_parsing_flow_from_keyboard(message)
        elif text == "üìä –°—Ç–∞—Ç—É—Å":
            await self._show_status(message)
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            state = FSMContext(storage=self.dp.storage, key=f"user:{message.from_user.id}")
            await self._show_settings(message, state)
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await self._show_help(message)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self._cmd_start(message)
        elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
            await self._show_status(message)
        elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å":
            self.app_manager.stop_parsing()
            await message.reply("‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await self._cmd_start(message)
        elif self._is_ozon_category_url(text):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_id = str(message.from_user.id)
            if user_id not in self.user_data:
                self.user_data[user_id] = {}
            self.user_data[user_id]['url'] = text.strip()
            self.user_data[user_id]['waiting_for_count'] = True
            
            user_id = str(message.from_user.id)
            settings = self.db.get_user_settings(user_id)
            default_count = settings.get('default_product_count', 500)
            
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text=f"‚è≠Ô∏è –°–∫–∏–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_count})")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ], resize_keyboard=True)
            
            await message.reply("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ü–∏—Ñ—Ä–∞–º–∏):", reply_markup=keyboard)
        elif text and text.isdigit():
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
            user_id = str(message.from_user.id)
            if user_id in self.user_data and self.user_data[user_id].get('waiting_for_count'):
                count = int(text)
                if 1 <= count <= 10000:
                    url = self.user_data[user_id].get('url')
                    if url:
                        self.user_data[user_id]['waiting_for_count'] = False
                        await self._start_parsing_with_count(message, url, count)
                        return
                else:
                    keyboard = ReplyKeyboardMarkup(keyboard=[
                        [KeyboardButton(text="‚è≠Ô∏è –°–∫–∏–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500)")],
                        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
                    ], resize_keyboard=True)
                    await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000:", reply_markup=keyboard)
                    return
            
            await message.reply("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –ø–æ–º–æ—â—å")
        elif text.startswith("‚è≠Ô∏è –°–∫–∏–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"):
            user_id = str(message.from_user.id)
            if user_id in self.user_data and self.user_data[user_id].get('waiting_for_count'):
                url = self.user_data[user_id].get('url')
                if url:
                    self.user_data[user_id]['waiting_for_count'] = False
                    settings = self.db.get_user_settings(user_id)
                    default_count = settings.get('default_product_count', 500)
                    await self._start_parsing_with_count(message, url, default_count)
                    return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user_id = str(message.from_user.id)
            if user_id in self.user_data:
                self.user_data[user_id]['waiting_for_count'] = False
            await self._cmd_start(message)
        else:
            await message.reply("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –ø–æ–º–æ—â—å\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
    
    async def _start_parsing_flow_from_keyboard(self, message: Message):
        if self.app_manager.is_running:
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True)
            await message.reply("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.", reply_markup=keyboard)
        else:
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ], resize_keyboard=True)
            await message.reply("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon:", reply_markup=keyboard)
            state = FSMContext(storage=self.dp.storage, key=f"user:{message.from_user.id}")
            await state.set_state(ParsingStates.waiting_for_url)
    
    def _is_authorized_user(self, message_or_query) -> bool:
        user_id = str(message_or_query.from_user.id)
        if user_id not in self.user_ids:
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return False
        return True
    
    def _is_ozon_category_url(self, url: str) -> bool:
        return (
            url.startswith(('http://', 'https://')) and
            'ozon.ru' in url and
            ('/category/' in url or '/search/' in url or '/seller/' in url)
        )
    
    async def send_message(self, text: str) -> bool:
        try:
            if not self.is_running:
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            success = True
            for user_id in self.user_ids:
                try:
                    await self.bot.send_message(chat_id=user_id, text=text)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    success = False
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    

    
    async def _change_default_count(self, query: CallbackQuery, state: FSMContext):
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True)
        
        await query.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ—Ç 1 –¥–æ 10000):")
        await query.message.reply("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)
        await state.set_state(ParsingStates.waiting_for_default_count)
    
    async def _handle_default_count_input(self, message: Message, state: FSMContext):
        if not self._is_authorized_user(message):
            return
        
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await self._show_settings(message, state)
            return
        
        try:
            count = int(message.text.strip())
            if count < 1 or count > 10000:
                raise ValueError()
        except ValueError:
            keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ], resize_keyboard=True)
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000:", reply_markup=keyboard)
            return
        
        user_id = str(message.from_user.id)
        settings = self.db.get_user_settings(user_id)
        settings['default_product_count'] = count
        self.db.save_user_settings(user_id, settings['selected_fields'], settings['field_order'], count)
        
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ], resize_keyboard=True)
        
        await message.reply(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {count}", reply_markup=keyboard)
        await state.clear()
    
    async def _configure_fields(self, query: CallbackQuery, state: FSMContext):
        user_id = str(query.from_user.id)
        settings = self.db.get_user_settings(user_id)
        selected_fields = settings['selected_fields']
        field_order = settings['field_order']
        
        text = "üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel:\n\n"
        
        keyboard = []
        for field_key, field_name in FIELD_NAMES.items():
            if field_key in selected_fields:
                order_num = field_order.index(field_key) + 1 if field_key in field_order else len(field_order) + 1
                button_text = f"‚úÖ {field_name} ({order_num})"
            else:
                button_text = f"‚¨ú {field_name}"
            
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"toggle_field_{field_key}")])
        
        keyboard.extend([
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_settings")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")]
        ])
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    

    
    def stop(self):
        try:
            self.is_running = False
            # üöÄ non-blocking stop
            if hasattr(self, 'dp') and self.dp and self.dp._loop and not self.dp._loop.is_closed():
                asyncio.run_coroutine_threadsafe(self.dp.stop_polling(), self.dp._loop)
            if self.bot_thread and self.bot_thread.is_alive():
                self.bot_thread.join(timeout=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")