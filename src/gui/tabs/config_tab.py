"""
–í–∫–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import logging
from pathlib import Path
import sys

logger = logging.getLogger(__name__)

class ConfigTab:
    """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self, parent, app_manager):
        self.parent = parent
        self.app_manager = app_manager
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.bot_token_var = tk.StringVar()
        self.user_id_var = tk.StringVar()
        self.show_token_var = tk.BooleanVar()
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤–∫–ª–∞–¥–∫–∏"""
        self.frame = ttk.Frame(self.parent)
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        telegram_group = ttk.LabelFrame(self.frame, text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞", padding=15)
        telegram_group.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(telegram_group, text="–¢–æ–∫–µ–Ω –±–æ—Ç–∞:", font=('Arial', 12)).grid(row=0, column=0, sticky=tk.W, pady=5)
        self.token_entry = ttk.Entry(telegram_group, textvariable=self.bot_token_var, width=60, show="*")
        self.token_entry.grid(row=0, column=1, sticky=tk.EW, padx=(10, 0), pady=5)
        
        show_token_cb = ttk.Checkbutton(telegram_group, text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω", 
                                       variable=self.show_token_var, 
                                       command=self._toggle_token_visibility)
        show_token_cb.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=2)
        
        ttk.Label(telegram_group, text="User ID:", font=('Arial', 12)).grid(row=2, column=0, sticky=tk.W, pady=5)
        self.user_id_entry = ttk.Entry(telegram_group, textvariable=self.user_id_var, width=60)
        self.user_id_entry.grid(row=2, column=1, sticky=tk.EW, padx=(10, 0), pady=5)
        
        telegram_group.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(self.frame)
        buttons_frame.pack(fill=tk.X, padx=10, pady=15)
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self._save_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self._load_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self._clear_fields).pack(side=tk.LEFT, padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.LabelFrame(self.frame, text="üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", padding=15)
        info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        info_text = """1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram:
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω

2. –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π User ID:
   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot
   ‚Ä¢ –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–π ID —á–µ—Ä–µ–∑ @getmyid_bot

3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è –≤—ã—à–µ
4. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        
        info_label = ttk.Label(info_frame, text=info_text, justify=tk.LEFT, font=('Arial', 10))
        info_label.pack(anchor=tk.W)
    
    def get_frame(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–µ–π–º –≤–∫–ª–∞–¥–∫–∏"""
        return self.frame
    
    def _toggle_token_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        if self.show_token_var.get():
            self.token_entry.config(show="")
        else:
            self.token_entry.config(show="*")
    
    def _get_config_path(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if getattr(sys, 'frozen', False):
            # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ (PyInstaller)
            return Path(sys.executable).parent / "config.txt"
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, —á—Ç–æ –∏ –≤ config_loader.py
            return Path(__file__).parent.parent.parent.parent / "config.txt"
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            bot_token = self.bot_token_var.get().strip()
            user_id = self.user_id_var.get().strip()
            
            if not bot_token or not user_id:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return
            
            config_path = self._get_config_path()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤: {config_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(config_path, "w", encoding="utf-8") as f:
                f.write(f"TELEGRAM_BOT_TOKEN={bot_token}\n")
                f.write(f"TELEGRAM_CHAT_ID={user_id}\n")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {config_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_path = self._get_config_path()
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑: {config_path}")
            
            if not config_path.exists():
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
                return
            
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = {}
            with open(config_path, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if line and '=' in line:
                        key, value = line.split('=', 1)
                        config[key.strip()] = value.strip()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
            if "TELEGRAM_BOT_TOKEN" in config:
                self.bot_token_var.set(config["TELEGRAM_BOT_TOKEN"])
            
            if "TELEGRAM_CHAT_ID" in config:
                self.user_id_var.set(config["TELEGRAM_CHAT_ID"])
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def _clear_fields(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π"""
        self.bot_token_var.set("")
        self.user_id_var.set("")
        logger.info("–ü–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")