"""
–í–∫–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import logging
from pathlib import Path
import sys

logger = logging.getLogger(__name__)

class ConfigTab:
    """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self, parent, app_manager):
        self.parent = parent
        self.app_manager = app_manager
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.bot_token_var = tk.StringVar()
        self.show_token_var = tk.BooleanVar()
        
        # –ú–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∞–∫—Å–∏–º—É–º 3)
        self.user_id_vars = []
        self.user_id_entries = []
        self.remove_buttons = []
        self.max_users = 3
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤–∫–ª–∞–¥–∫–∏"""
        self.frame = ttk.Frame(self.parent)
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        telegram_group = ttk.LabelFrame(self.frame, text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞", padding=15)
        telegram_group.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(telegram_group, text="–¢–æ–∫–µ–Ω –±–æ—Ç–∞:", font=('Arial', 12)).grid(row=0, column=0, sticky=tk.W, pady=5)
        self.token_entry = ttk.Entry(telegram_group, textvariable=self.bot_token_var, width=60, show="*")
        self.token_entry.grid(row=0, column=1, sticky=tk.EW, padx=(10, 0), pady=5)
        
        show_token_cb = ttk.Checkbutton(telegram_group, text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω", 
                                       variable=self.show_token_var, 
                                       command=self._toggle_token_visibility)
        show_token_cb.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=2)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ttk.Label(telegram_group, text="User IDs:", font=('Arial', 12)).grid(row=2, column=0, sticky=tk.NW, pady=5)
        
        self.users_frame = ttk.Frame(telegram_group)
        self.users_frame.grid(row=2, column=1, sticky=tk.EW, padx=(10, 0), pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.add_user_btn = ttk.Button(telegram_group, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å ID", command=self._add_user_field)
        self.add_user_btn.grid(row=3, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        
        telegram_group.columnconfigure(1, weight=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._add_user_field()
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(self.frame)
        buttons_frame.pack(fill=tk.X, padx=10, pady=15)
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self._save_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self._load_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self._clear_fields).pack(side=tk.LEFT, padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.LabelFrame(self.frame, text="üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", padding=15)
        info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        info_text = """1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram:
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω

2. –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π User ID:
   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot
   ‚Ä¢ –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–π ID —á–µ—Ä–µ–∑ @getmyid_bot

3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è –≤—ã—à–µ
4. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        
        info_label = ttk.Label(info_frame, text=info_text, justify=tk.LEFT, font=('Arial', 10))
        info_label.pack(anchor=tk.W)
    
    def get_frame(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–µ–π–º –≤–∫–ª–∞–¥–∫–∏"""
        return self.frame
    
    def _toggle_token_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        if self.show_token_var.get():
            self.token_entry.config(show="")
        else:
            self.token_entry.config(show="*")
    
    def _add_user_field(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è User ID"""
        if len(self.user_id_vars) >= self.max_users:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.max_users}")
            return
        
        row = len(self.user_id_vars)
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
        user_var = tk.StringVar()
        self.user_id_vars.append(user_var)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª—è –∏ –∫–Ω–æ–ø–∫–∏
        field_frame = ttk.Frame(self.users_frame)
        field_frame.pack(fill=tk.X, pady=2)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        entry = ttk.Entry(field_frame, textvariable=user_var, width=50)
        entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.user_id_entries.append(entry)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
        remove_btn = ttk.Button(field_frame, text="‚ûñ", width=3, 
                               command=lambda idx=row: self._remove_user_field(idx))
        remove_btn.pack(side=tk.RIGHT, padx=(5, 0))
        self.remove_buttons.append(remove_btn)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        self._update_remove_buttons_visibility()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if len(self.user_id_vars) >= self.max_users:
            self.add_user_btn.config(state='disabled')
    
    def _remove_user_field(self, index):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª–µ User ID –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if len(self.user_id_vars) <= 1:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            return
        
        # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–æ–≤
        self.user_id_vars.pop(index)
        entry = self.user_id_entries.pop(index)
        button = self.remove_buttons.pop(index)
        
        # –£–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
        entry.master.destroy()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
        self._recreate_user_fields()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_user_btn.config(state='normal')
    
    def _recreate_user_fields(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        values = [var.get() for var in self.user_id_vars]
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        for widget in self.users_frame.winfo_children():
            widget.destroy()
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
        self.user_id_entries.clear()
        self.remove_buttons.clear()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—è
        for i, value in enumerate(values):
            field_frame = ttk.Frame(self.users_frame)
            field_frame.pack(fill=tk.X, pady=2)
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry = ttk.Entry(field_frame, textvariable=self.user_id_vars[i], width=50)
            entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
            self.user_id_entries.append(entry)
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            remove_btn = ttk.Button(field_frame, text="‚ûñ", width=3, 
                                   command=lambda idx=i: self._remove_user_field(idx))
            remove_btn.pack(side=tk.RIGHT, padx=(5, 0))
            self.remove_buttons.append(remove_btn)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        self._update_remove_buttons_visibility()
    
    def _update_remove_buttons_visibility(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è"""
        show_buttons = len(self.user_id_vars) > 1
        for button in self.remove_buttons:
            if show_buttons:
                button.config(state='normal')
            else:
                button.config(state='disabled')
    
    def _get_config_path(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if getattr(sys, 'frozen', False):
            # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ (PyInstaller)
            return Path(sys.executable).parent / "config.txt"
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, —á—Ç–æ –∏ –≤ config_loader.py
            return Path(__file__).parent.parent.parent.parent / "config.txt"
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            bot_token = self.bot_token_var.get().strip()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ User ID
            user_ids = []
            for var in self.user_id_vars:
                user_id = var.get().strip()
                if user_id:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ ID
                    user_ids.append(user_id)
            
            if not bot_token:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
                return
            
            if not user_ids:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω User ID")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å User ID
            if len(user_ids) != len(set(user_ids)):
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "User ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏")
                return
            
            config_path = self._get_config_path()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤: {config_path}")
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            existing_config = {}
            if config_path.exists():
                with open(config_path, "r", encoding="utf-8") as f:
                    for line in f:
                        line = line.strip()
                        if line and '=' in line and not line.startswith('#'):
                            key, value = line.split('=', 1)
                            existing_config[key.strip()] = value.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(config_path, "w", encoding="utf-8") as f:
                f.write(f"TELEGRAM_BOT_TOKEN={bot_token}\n")
                f.write(f"TELEGRAM_CHAT_ID={','.join(user_ids)}\n")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ ID
                for user_id in user_ids:
                    user_prefix = f"USER_{user_id}_"
                    
                    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
                    for key, value in existing_config.items():
                        if key.startswith(user_prefix):
                            f.write(f"{key}={value}\n")
                    
                    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
                    if f"{user_prefix}SELECTED_FIELDS" not in existing_config:
                        f.write(f"{user_prefix}SELECTED_FIELDS=name,company_name,product_url,image_url\n")
                        f.write(f"{user_prefix}FIELD_ORDER=name,company_name,product_url,image_url\n")
                        f.write(f"{user_prefix}DEFAULT_COUNT=500\n")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {config_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_path = self._get_config_path()
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑: {config_path}")
            
            if not config_path.exists():
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
                return
            
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = {}
            with open(config_path, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if line and '=' in line:
                        key, value = line.split('=', 1)
                        config[key.strip()] = value.strip()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            if "TELEGRAM_BOT_TOKEN" in config:
                self.bot_token_var.set(config["TELEGRAM_BOT_TOKEN"])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º User IDs
            if "TELEGRAM_CHAT_ID" in config:
                user_ids = config["TELEGRAM_CHAT_ID"].split(',')
                user_ids = [uid.strip() for uid in user_ids if uid.strip()]
                
                # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
                for widget in self.users_frame.winfo_children():
                    widget.destroy()
                self.user_id_vars.clear()
                self.user_id_entries.clear()
                self.remove_buttons.clear()
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ User ID
                for user_id in user_ids:
                    if len(self.user_id_vars) < self.max_users:
                        self._add_user_field()
                        self.user_id_vars[-1].set(user_id)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç User ID, –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
                if not user_ids:
                    self._add_user_field()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                if len(self.user_id_vars) >= self.max_users:
                    self.add_user_btn.config(state='disabled')
                else:
                    self.add_user_btn.config(state='normal')
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def _clear_fields(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π"""
        self.bot_token_var.set("")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ User ID –ø–æ–ª—è
        for var in self.user_id_vars:
            var.set("")
        
        logger.info("–ü–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")