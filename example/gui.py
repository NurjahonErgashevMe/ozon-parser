import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import webbrowser
import os
from datetime import datetime

class TabManager:
    def __init__(self, root, utils, log_manager, bot_manager=None):
        self.root = root
        self.utils = utils
        self.log_manager = log_manager
        self.logger = log_manager.logger
        self.bot_manager = bot_manager
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.show_token_var = tk.BooleanVar()
        self.status_var = tk.StringVar()
        self.bot_status_var = tk.StringVar()
        self.parser_status_var = tk.StringVar()
        self.progress_var = tk.StringVar()
        self.workers_var = tk.IntVar(value=4)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
    def setup_ui(self):
        self.root.title("OZON Parser Manager")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        self.root.eval('tk::PlaceWindow . center')
        
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.setup_config_tab(notebook)
        self.setup_control_tab(notebook)
        self.setup_logs_tab(notebook)
        self.setup_developer_tab(notebook)
        
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, 
                              relief=tk.SUNKEN, anchor=tk.W)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=(0, 10))
    
    def setup_config_tab(self, notebook):
        config_frame = ttk.Frame(notebook, padding="20")
        notebook.add(config_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
        
        title_label = ttk.Label(config_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 30))
        
        ttk.Label(config_frame, text="TELEGRAM_BOT_TOKEN:", 
                 font=('Arial', 12)).grid(row=1, column=0, sticky=tk.W, pady=(0, 5))
        self.token_entry = ttk.Entry(config_frame, width=70, show="*", font=('Arial', 10))
        self.token_entry.grid(row=2, column=0, columnspan=2, pady=(0, 20), sticky=(tk.W, tk.E))
        
        show_token_cb = ttk.Checkbutton(config_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω", 
                                       variable=self.show_token_var, 
                                       command=self.toggle_token_visibility)
        show_token_cb.grid(row=3, column=0, sticky=tk.W, pady=(0, 15))
        
        ttk.Label(config_frame, text="TELEGRAM_CHAT_ID:", 
                 font=('Arial', 12)).grid(row=4, column=0, sticky=tk.W, pady=(0, 5))
        self.chat_id_entry = ttk.Entry(config_frame, width=70, font=('Arial', 10))
        self.chat_id_entry.grid(row=5, column=0, columnspan=2, pady=(0, 25), sticky=(tk.W, tk.E))
        
        button_frame = ttk.Frame(config_frame)
        button_frame.grid(row=6, column=0, columnspan=2, pady=15)
        
        save_btn = ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_config)
        save_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        test_btn = ttk.Button(button_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=self.test_config)
        test_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        clear_btn = ttk.Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_fields)
        clear_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        load_btn = ttk.Button(button_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_existing_config)
        load_btn.pack(side=tk.LEFT)
        
        info_frame = ttk.LabelFrame(config_frame, text="üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", padding="15")
        info_frame.grid(row=7, column=0, columnspan=2, pady=25, sticky=(tk.W, tk.E))
        
        info_text = """1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram:
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω
   
2. –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π Chat ID:
   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot
   ‚Ä¢ –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–π ID —á–µ—Ä–µ–∑ @getmyid_bot
   
3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è –≤—ã—à–µ
4. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
5. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        
        info_label = ttk.Label(info_frame, text=info_text, justify=tk.LEFT, font=('Arial', 10))
        info_label.pack()
        
        config_frame.columnconfigure(0, weight=1)
    
    def setup_control_tab(self, notebook):
        control_frame = ttk.Frame(notebook, padding="20")
        notebook.add(control_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        ttk.Label(control_frame, text="–ü–∞—Ä—Å–∏–Ω–≥ OZON", font=('Arial', 16, 'bold')).pack(pady=(0, 20))
                        
        # Bot status
        bot_status_frame = ttk.LabelFrame(control_frame, text="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", padding="15")
        bot_status_frame.pack(fill=tk.X, pady=20)
        
        self.bot_status_var.set("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        ttk.Label(bot_status_frame, textvariable=self.bot_status_var, font=('Arial', 14)).pack(anchor=tk.W)
        
        bot_buttons_frame = ttk.Frame(bot_status_frame)
        bot_buttons_frame.pack(pady=10)
        
        self.start_btn = ttk.Button(bot_buttons_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", 
                                   command=self.start_bot_handler, state=tk.NORMAL)
        self.start_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_bot_btn = ttk.Button(bot_buttons_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", 
                                  command=self.stop_bot_handler, state=tk.DISABLED)
        self.stop_bot_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.restart_btn = ttk.Button(bot_buttons_frame, text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", 
                                     command=self.restart_bot_handler, state=tk.DISABLED)
        self.restart_btn.pack(side=tk.LEFT)
            
    def setup_logs_tab(self, notebook):
        logs_frame = ttk.Frame(notebook, padding="10")
        notebook.add(logs_frame, text="–õ–æ–≥–∏")
        
        ttk.Label(logs_frame, text="–õ–æ–≥–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
                 font=('Arial', 14, 'bold')).pack(pady=(0, 10))
        
        log_buttons_frame = ttk.Frame(logs_frame)
        log_buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(log_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(log_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.save_logs).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(log_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.refresh_logs).pack(side=tk.LEFT)
        
        self.log_text = scrolledtext.ScrolledText(logs_frame, wrap=tk.WORD, 
                                                 font=('Consolas', 10), 
                                                 bg='#1e1e1e', fg='#ffffff',
                                                 insertbackground='white')
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        self.log_text.tag_config("INFO", foreground="#00ff00")
        self.log_text.tag_config("WARNING", foreground="#ffff00")
        self.log_text.tag_config("ERROR", foreground="#ff0000")
        self.log_text.tag_config("DEBUG", foreground="#00ffff")
    
    def setup_developer_tab(self, notebook):
        dev_frame = ttk.Frame(notebook, padding="20")
        notebook.add(dev_frame, text="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        
        title_label = ttk.Label(dev_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=(0, 30))
        
        info_frame = ttk.LabelFrame(dev_frame, text="–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏", padding="20")
        info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        link_style = ttk.Style()
        link_style.configure("Link.TLabel", foreground="blue", font=('Arial', 12, 'underline'))
        
        ttk.Label(info_frame, text="Telegram:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        telegram_link = ttk.Label(info_frame, text="@NurjahonErgashevMe", style="Link.TLabel", cursor="hand2")
        telegram_link.pack(anchor=tk.W, padx=20, pady=(0, 20))
        telegram_link.bind("<Button-1>", lambda e: webbrowser.open("https://t.me/NurjahonErgashevMe"))
        
        ttk.Label(info_frame, text="Kwork:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        kwork_link = ttk.Label(info_frame, text="https://kwork.ru/user/nurjahonergashevme", 
                              style="Link.TLabel", cursor="hand2")
        kwork_link.pack(anchor=tk.W, padx=20, pady=(0, 20))
        kwork_link.bind("<Button-1>", lambda e: webbrowser.open("https://kwork.ru/user/nurjahonergashevme"))
        
        ttk.Label(info_frame, text="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        ttk.Label(info_frame, text="OZON Parser Manager v1.0", font=('Arial', 11)).pack(anchor=tk.W, padx=20)
        
        logo_frame = ttk.Frame(dev_frame)
        logo_frame.pack(pady=20)
        ttk.Label(logo_frame, text="[–õ–û–ì–û–¢–ò–ü]", font=('Arial', 24), 
                 foreground="gray", borderwidth=2, relief="solid", 
                 width=15).pack()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
    def start_bot_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        if self.bot_manager:
            self.bot_manager.start_bot()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "BotManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    def stop_bot_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        if self.bot_manager:
            self.bot_manager.stop_bot()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "BotManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    def restart_bot_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        if self.bot_manager:
            self.bot_manager.restart_bot()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "BotManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    def toggle_token_visibility(self):
        if self.show_token_var.get():
            self.token_entry.config(show="")
        else:
            self.token_entry.config(show="*")
    
    def test_config(self):
        token = self.token_entry.get().strip()
        chat_id = self.chat_id_entry.get().strip()

        if not token or not chat_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        issues = []
        if ':' not in token:
            issues.append("–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª ':'")
        if len(token) < 35:
            issues.append("–¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        if not chat_id.lstrip('-').isdigit():
            issues.append("Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '-')")

        if issues:
            messagebox.showwarning("–ü—Ä–æ–±–ª–µ–º—ã", "\n".join(issues))
            self.logger.warning(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {', '.join(issues)}")
        else:
            messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
            self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")

        self.status_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def save_config(self):
        token = self.token_entry.get().strip()
        chat_id = self.chat_id_entry.get().strip()
        
        if not token or not chat_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
            return
        
        config_path = self.get_config_path()
        try:
            with open(config_path, "w", encoding="utf-8") as f:
                f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
                f.write(f"TELEGRAM_CHAT_ID={chat_id}\n")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ config.txt")
            self.status_var.set("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def load_existing_config(self):
        config_path = self.get_config_path()
        if not os.path.exists(config_path):
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        try:
            config = self.utils.load_config_file(config_path)
            self.token_entry.delete(0, tk.END)
            self.chat_id_entry.delete(0, tk.END)
            
            if "TELEGRAM_BOT_TOKEN" in config:
                self.token_entry.insert(0, config["TELEGRAM_BOT_TOKEN"])
            if "TELEGRAM_CHAT_ID" in config:
                self.chat_id_entry.insert(0, config["TELEGRAM_CHAT_ID"])
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            self.status_var.set("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def get_config_path(self):
        return os.path.join(os.getcwd(), "config.txt")
    
    def clear_fields(self):
        self.token_entry.delete(0, tk.END)
        self.chat_id_entry.delete(0, tk.END)
        self.status_var.set("–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã")
        self.logger.info("–ü–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏
    def clear_logs(self):
        self.log_text.delete(1.0, tk.END)
        self.logger.info("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_logs(self):
        try:
            logs_content = self.log_text.get(1.0, tk.END)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"logs_{timestamp}.txt"
            
            with open(filename, "w", encoding="utf-8") as f:
                f.write(logs_content)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            self.logger.info(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def refresh_logs(self):
        self.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤...")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∏)
    def start_category_parsing(self):
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        self.logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    def start_products_parsing(self):
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        self.logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤")
    
    def stop_parsing(self):
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")