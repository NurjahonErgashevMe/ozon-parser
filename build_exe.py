#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ OZONPARSER.exe —Å –ø–æ–º–æ—â—å—é PyInstaller
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def get_selenium_stealth_path():
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ selenium_stealth"""
    try:
        import selenium_stealth
        stealth_path = os.path.dirname(selenium_stealth.__file__)
        js_path = os.path.join(stealth_path, 'js')
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ selenium_stealth: {stealth_path}")
        print(f"‚úÖ –ü—É—Ç—å –∫ JS —Ñ–∞–π–ª–∞–º: {js_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ JS —Ñ–∞–π–ª–æ–≤
        if os.path.exists(js_path):
            js_files = os.listdir(js_path)
            print(f"üìÑ JS —Ñ–∞–π–ª—ã: {js_files}")
            return stealth_path, js_path
        else:
            print("‚ùå –ü–∞–ø–∫–∞ JS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return stealth_path, None
            
    except ImportError:
        print("‚ùå selenium_stealth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None, None

def create_selenium_stealth_fallback():
    """–°–æ–∑–¥–∞–µ—Ç fallback JS —Ñ–∞–π–ª—ã –¥–ª—è selenium_stealth –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    print("üîß –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ JS —Ñ–∞–π–ª—ã –¥–ª—è selenium_stealth...")
    
    js_dir = Path('selenium_stealth_js')
    js_dir.mkdir(exist_ok=True)
    
    js_files = {
        'utils.js': '''
// utils.js –¥–ª—è selenium-stealth
(function() {
    'use strict';
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    if (navigator.webdriver) {
        delete navigator.webdriver;
    }
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º navigator.webdriver
    Object.defineProperty(navigator, 'webdriver', {
        get: () => undefined,
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º automation
    window.chrome = {
        runtime: {},
    };
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º plugins
    Object.defineProperty(navigator, 'plugins', {
        get: () => [1, 2, 3, 4, 5],
    });
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º languages
    Object.defineProperty(navigator, 'languages', {
        get: () => ['ru-RU', 'ru'],
    });
    
})();
        ''',
        
        'chrome_runtime.js': '''
// chrome_runtime.js
window.chrome = {
    runtime: {},
};
        ''',
        
        'navigator_vendor.js': '''
// navigator_vendor.js
Object.defineProperty(navigator, 'vendor', {
    get: () => 'Google Inc.',
});
        ''',
        
        'navigator_plugins.js': '''
// navigator_plugins.js  
Object.defineProperty(navigator, 'plugins', {
    get: () => [1, 2, 3, 4, 5],
});
        ''',
        
        'webgl_vendor.js': '''
// webgl_vendor.js
const getParameter = WebGLRenderingContext.getParameter;
WebGLRenderingContext.prototype.getParameter = function(parameter) {
    if (parameter === 37445) {
        return 'Intel Inc.';
    }
    if (parameter === 37446) {
        return 'Intel Iris OpenGL Engine';
    }
    return getParameter(parameter);
};
        ''',
        
        'chrome_csi.js': '''
// chrome_csi.js
window.chrome.csi = function() {
    return {
        onloadT: Date.now(),
        startE: Date.now(),
        tran: 15
    };
};
        ''',
        
        'chrome_load_times.js': '''
// chrome_load_times.js
window.chrome.loadTimes = function() {
    return {
        requestTime: Date.now() / 1000,
        startLoadTime: Date.now() / 1000,
        commitLoadTime: Date.now() / 1000,
        finishDocumentLoadTime: Date.now() / 1000,
        finishLoadTime: Date.now() / 1000,
        firstPaintTime: Date.now() / 1000,
        firstPaintAfterLoadTime: 0,
        navigationType: 'Other',
        wasFetchedViaSpdy: false,
        wasNpnNegotiated: false,
        npnNegotiatedProtocol: 'unknown',
        wasAlternateProtocolAvailable: false,
        connectionInfo: 'unknown'
    };
};
        '''
    }
    
    # –°–æ–∑–¥–∞–µ–º JS —Ñ–∞–π–ª—ã
    for filename, content in js_files.items():
        js_file = js_dir / filename
        js_file.write_text(content.strip(), encoding='utf-8')
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {js_file}")
    
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ JS —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤: {js_dir}")
    return str(js_dir)

def clean_build_dirs():
    """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–±–æ—Ä–∫–∏"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–±–æ—Ä–∫–∏...")
    
    # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ build –∏ dist, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    for dir_name in ['build', 'dist']:
        if os.path.exists(dir_name):
            try:
                shutil.rmtree(dir_name)
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_name}: {e}")
    
    # –£–¥–∞–ª—è–µ–º .spec —Ñ–∞–π–ª—ã
    for spec_file in Path('.').glob('*.spec'):
        try:
            os.remove(spec_file)
            print(f"‚úÖ –§–∞–π–ª {spec_file} —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {spec_file}: {e}")

def check_main_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    possible_files = ['main.py']
    main_file = None
    
    for file in possible_files:
        if os.path.exists(file):
            main_file = file
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª: {file}")
            break
    
    if not main_file:
        print("‚ùå –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:")
        for file in possible_files:
            print(f"   - {file}")
        return None
    
    return main_file

def check_and_fix_pathlib():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–∫–µ—Ç–æ–º pathlib"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ pathlib...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç pathlib
        result = subprocess.run(
            [sys.executable, '-m', 'pip', 'show', 'pathlib'],
            capture_output=True, text=True
        )
        
        # –ï—Å–ª–∏ pathlib —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if result.returncode == 0:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞–∫–µ—Ç pathlib, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã. –£–¥–∞–ª—è–µ–º...")
            subprocess.run(
                [sys.executable, '-m', 'pip', 'uninstall', 'pathlib', '-y'],
                capture_output=True, text=True
            )
            print("‚úÖ –ü–∞–∫–µ—Ç pathlib —É–¥–∞–ª–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ pathlib: {e}")
        return False

def check_and_create_dirs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for dir_name in ['logs', 'output']:
        if not os.path.exists(dir_name):
            try:
                os.makedirs(dir_name)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_name}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º config.txt
    if not os.path.exists('config.txt'):
        try:
            with open('config.txt', 'w', encoding='utf-8') as f:
                f.write("TELEGRAM_BOT_TOKEN=your_bot_token_here\n")
                f.write("TELEGRAM_CHAT_ID=your_chat_id_here\n")
            print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª config.txt")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ config.txt: {e}")
    else:
        print("‚úÖ –§–∞–π–ª config.txt –Ω–∞–π–¥–µ–Ω")
    
    return True

def create_spec_file(main_file):
    """–°–æ–∑–¥–∞–Ω–∏–µ .spec —Ñ–∞–π–ª–∞ –¥–ª—è PyInstaller"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ .spec —Ñ–∞–π–ª–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ selenium_stealth
    stealth_path, js_path = get_selenium_stealth_path()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    # console_mode = input("üñ•Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏? (y/n): ").lower().strip() == 'y'
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    data_files = []
    additional_files = [
        'config.txt',
        'logs', 
        'output'
    ]
    
    print("üîç –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    for file in additional_files:
        if os.path.exists(file):
            if os.path.isdir(file):
                data_files.append(f"('{file}', '{file}')")
                print(f"  ‚úÖ {file}/ (–ø–∞–ø–∫–∞)")
            else:
                data_files.append(f"('{file}', '.')")
                print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ö†Ô∏è  {file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –î–æ–±–∞–≤–ª—è–µ–º selenium_stealth JS —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
    if js_path and os.path.exists(js_path):
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è Windows
        js_path_normalized = js_path.replace('\\', '\\\\')
        data_files.append(f"(r'{js_path_normalized}', 'selenium_stealth/js')")
        print(f"  ‚úÖ selenium_stealth JS —Ñ–∞–π–ª—ã: {js_path}")
    else:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ JS —Ñ–∞–π–ª—ã
        fallback_js_path = create_selenium_stealth_fallback()
        fallback_js_path_normalized = fallback_js_path.replace('\\', '\\\\')
        data_files.append(f"(r'{fallback_js_path_normalized}', 'selenium_stealth/js')")
        print(f"  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ selenium_stealth JS —Ñ–∞–π–ª—ã: {fallback_js_path}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
    if data_files:
        datas_line = f"datas=[{', '.join(data_files)}],"
        print(f"üì¶ –ë—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã —Ñ–∞–π–ª—ã: {len(data_files)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    else:
        datas_line = "datas=[],"
        print("üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    spec_content = f"""# -*- mode: python ; coding: utf-8 -*-

import sys
from pathlib import Path

block_cipher = None

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
base_path = Path('.').absolute()

# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
a = Analysis(
    ['{main_file}'],
    pathex=[str(base_path)],
    binaries=[],
    {datas_line}
    hiddenimports=[
        'tkinter', 
        'tkinter.ttk',
        'tkinter.messagebox',
        'tkinter.filedialog',
        'selenium',
        'selenium.webdriver',
        'selenium.webdriver.chrome',
        'selenium.webdriver.chrome.options',
        'selenium.webdriver.chrome.service',
        'selenium.webdriver.common.by',
        'selenium.webdriver.support.ui',
        'selenium.webdriver.support.expected_conditions',
        'selenium_stealth',
        'undetected_chromedriver',
        'telegram',
        'telegram.ext',
        'json',
        'logging',
        'threading',
        'queue',
        'time',
        'datetime',
        'os',
        'sys',
        're',
        'requests',
        'bs4',
        'lxml',
        'openpyxl',
        'pandas',
        'dotenv',
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='OZONPARSER',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False, 
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='logo.ico' if Path('logo.ico').exists() else None,
)
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º .spec —Ñ–∞–π–ª
    spec_path = 'ozonparser.spec'
    try:
        with open(spec_path, 'w', encoding='utf-8') as f:
            f.write(spec_content)
        print(f"‚úÖ –§–∞–π–ª {spec_path} —Å–æ–∑–¥–∞–Ω")
        return spec_path
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .spec —Ñ–∞–π–ª–∞: {e}")
        return None

def simple_build_exe(main_file):
    """–ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞ .exe —Ñ–∞–π–ª–∞"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä–∫–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ selenium_stealth
    stealth_path, js_path = get_selenium_stealth_path()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω—Å–æ–ª—å
        console_mode = input("üñ•Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏? (y/n): ").lower().strip() == 'y'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É PyInstaller
        cmd = [
            sys.executable, 
            '-m', 
            'PyInstaller',
            '--name=OZONPARSER',
            '--onefile',
            '--clean',
            '--add-data', f'config.txt{os.pathsep}.',
            '--add-data', f'logs{os.pathsep}logs',
            '--add-data', f'output{os.pathsep}output',
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º selenium_stealth JS —Ñ–∞–π–ª—ã
        if js_path and os.path.exists(js_path):
            cmd.extend(['--add-data', f'{js_path}{os.pathsep}selenium_stealth/js'])
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã selenium_stealth JS —Ñ–∞–π–ª—ã: {js_path}")
        else:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ JS —Ñ–∞–π–ª—ã
            fallback_js_path = create_selenium_stealth_fallback()
            cmd.extend(['--add-data', f'{fallback_js_path}{os.pathsep}selenium_stealth/js'])
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ selenium_stealth JS —Ñ–∞–π–ª—ã: {fallback_js_path}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º –∫–æ–Ω—Å–æ–ª–∏
        if console_mode:
            cmd.append('--console')
        else:
            cmd.append('--windowed')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        hidden_imports = [
            'tkinter', 'tkinter.ttk', 'tkinter.messagebox', 'tkinter.filedialog',
            'selenium', 'selenium_stealth', 'undetected_chromedriver',
            'telegram', 'requests', 'bs4', 'lxml', 'openpyxl', 'pandas', 'dotenv'
        ]
        
        for imp in hidden_imports:
            cmd.extend(['--hidden-import', imp])
        
        if os.path.exists('logo.ico'):
            cmd.extend(['--icon=logo.ico'])
        
        cmd.append(main_file)
        
        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä–∫–µ:")
            if result.stdout:
                print("üìã STDOUT:")
                print(result.stdout[-2000:])
            if result.stderr:
                print("üö® STDERR:")
                print(result.stderr[-2000:])
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä–∫–µ: {e}")
        return False

def build_exe():
    """–°–±–æ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É OZONPARSER.exe...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
    main_file = check_main_file()
    if not main_file:
        return False
    
    # –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏
    clean_build_dirs()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    check_and_create_dirs()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å pathlib
    if not check_and_fix_pathlib():
        return False
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–µ—Ç–æ–¥–µ —Å–±–æ—Ä–∫–∏
    use_spec = input("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .spec —Ñ–∞–π–ª? (y/n): ").lower().strip() == 'y'
    
    if use_spec:
        # –°–æ–∑–¥–∞–µ–º .spec —Ñ–∞–π–ª
        spec_file = create_spec_file(main_file)
        if not spec_file:
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller
        print("‚öôÔ∏è –ó–∞–ø—É—Å–∫ PyInstaller —Å .spec —Ñ–∞–π–ª–æ–º...")
        try:
            result = subprocess.run(
                [sys.executable, '-m', 'PyInstaller', '--clean', spec_file],
                capture_output=True, text=True
            )
            
            if result.returncode == 0:
                print("‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                return check_exe_file()
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:")
                print_error_details(result)
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–±–æ—Ä–∫—É
                print("üîÑ –ü—Ä–æ–±—É—é –ø—Ä–æ—Å—Ç—É—é —Å–±–æ—Ä–∫—É...")
                return simple_build_exe(main_file)
                
        except FileNotFoundError:
            return install_pyinstaller_and_retry(main_file)
    else:
        # –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞
        return simple_build_exe(main_file)

def check_exe_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    exe_path = Path('dist/OZONPARSER.exe')
    if exe_path.exists():
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.1f} MB")
        print(f"üìÅ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: {exe_path.absolute()}")
        
        print("\nüéâ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É dist/")
        print("üñºÔ∏è –ò–∫–æ–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–µ—Å–ª–∏ logo.ico –Ω–∞–π–¥–µ–Ω–∞)")
        print("üì¶ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ .exe")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_exe = input("üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π .exe —Ñ–∞–π–ª? (y/n): ").lower().strip() == 'y'
        if test_exe:
            print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            try:
                subprocess.Popen([str(exe_path)])
                print("‚úÖ –§–∞–π–ª –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        
        return True
    else:
        print("‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏")
        return False

def print_error_details(result):
    """–í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ—à–∏–±–∫–∏"""
    print("\n--- –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–®–ò–ë–ö–ï ---")
    if result.stdout:
        print("üìã STDOUT:")
        print(result.stdout[-2000:])
    if result.stderr:
        print("üö® STDERR:")
        print(result.stderr[-2000:])
    print("--- –ö–û–ù–ï–¶ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –û–®–ò–ë–ö–ï ---\n")

def install_pyinstaller_and_retry(main_file):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyInstaller –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞"""
    print("‚ùå PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyInstaller
        install_result = subprocess.run([
            sys.executable, '-m', 'pip', 'install', 'pyinstaller'
        ], capture_output=True, text=True)
        
        if install_result.returncode == 0:
            print("‚úÖ PyInstaller —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–±–æ—Ä–∫–∏
            return simple_build_exe(main_file)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyInstaller:")
            print(install_result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PyInstaller: {e}")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ OZONPARSER.exe")
    print("=" * 60)
    
    success = build_exe()
    
    if success:
        print("\n‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üí° –ï—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–æ–Ω—Å–æ–ª—å—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    else:
        print("\n‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    print("=" * 60)